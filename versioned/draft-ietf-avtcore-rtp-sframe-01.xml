<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.8 (Ruby 3.0.2) -->
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-avtcore-rtp-sframe-01" category="std" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.20.1 -->
  <front>
    <title>RTP Payload Format for SFrame</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-avtcore-rtp-sframe-01"/>
    <author initials="P." surname="Thatcher" fullname="Peter Thatcher">
      <organization>Microsoft</organization>
      <address>
        <email>pthatcher@microsoft.com</email>
      </address>
    </author>
    <date/>
    <area>Applications and Real-Time</area>
    <workgroup>Audio/Video Transport Core Maintenance</workgroup>
    <keyword>Internet-Draft</keyword>
    <abstract>
      <?line 23?>

<t>This document describes the RTP payload format of SFrame.</t>
    </abstract>
  </front>
  <middle>
    <?line 27?>

<section anchor="introduction">
      <name>Introduction</name>
      <t>SFrame <xref target="I-D.draft-ietf-sframe-enc-01"/> describes an end-to-end encryption and authentication mechanism
for media frames in a multiparty conference call, in which central media servers (SFUs) can access the
media metadata needed to make forwarding decisions without having access to the actual media.</t>
      <t>This document describes how to packetize a media frame encrypted using SFrame into RTP packets.</t>
    </section>
    <section anchor="terminology-and-notation">
      <name>Terminology and Notation</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>
    </section>
    <section anchor="rtp-packetization-of-a-media-frame-encrypted-by-sframe">
      <name>RTP Packetization of a media frame encrypted by SFrame</name>
      <t>In order to packetize SFrame into RTP, packetization is done in 2 stages.
In the first stage, before SFrame encryption, media is packetized into RTP packets in a way specific to the media format.
In the second stage, each RTP packet from the first stage is packetized into RTP packets in a way specific to SFrame.
SFrame encryption is applied to the payload of each RTP packet between the first and second stages.</t>
      <t>For example, if a media frame to be encrypted by SFrame is encoded using VP8, the media frame is first
packetized according to <xref target="RFC7741"/> into one RTP packets with VP8-specific payloads.  Each of those
VP8 RTP payloads are then encrypted using SFrame, resulting in an SFrame-encrypted RTP payload of VP8.
SFrame-specific packetization is then applied to the SFrame-encrypted RTP payload of VP8, resulting in
RTP packets with SFrame-specific RTP payloads.</t>
      <t>SFrame-specific packetization is done by first breaking up the output of SFrame encryption
into fragments, and then prepending some fragment metadata necessary for depacketization.  Finally,
fragments are combined with values from the RTP header of the output of the media-format-specific
packetization.</t>
      <t>The SFrame-specific RTP payloads (fragments with prepended metadata) have the following format:</t>
      <artwork><![CDATA[
 0                   1                   2
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|L| media PT    |  media frame ID               |
| fragment index                |  fragment ... |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork>
      <t>The media PT must be the payload type of the output of the media-format-specific packetization.
The frame index of the first fragment of each media frame MUST be 0.
The frame index of each subsequent fragment MUST be one more than the previous fragment.
The L bit MUST be 0 for all fragments except for the last one of the media frame.
The media frame ID must be unique enough that a depacketizer may be able to differentiate
the fragments of one media frame from another.
The SSRC, timestamp, marker bit, and CSRCs of the SFrame RTP packets MUST be the same
as those of the output of the media-format-specific packetization.
The header extensions of the SFrame RTP packets SHOULD be the same
as those of the output of the media-format-specific packetization, but some may be omitted
if it is known that the omitted header extensions do not need to be duplicated on each SFrame RTP packet.
The payload type of the SFrame RTP packets must be a payload type that indicates the payload
format defined in this document, and it must have a negotiated RTP clock rate that is the same as the
media-format-specific RTP packet.</t>
    </section>
    <section anchor="rtp-depacketization-of-sframe">
      <name>RTP depacketization of SFrame</name>
      <t>Depacketization is done by doing the packetization process in reverse:</t>
      <ol spacing="normal" type="1"><li>
          <t>The fragments of a given media frame ID are grouped together in order of fragment index and concatenated together, resulting in a media frame encrypted by SFrame.</t>
        </li>
        <li>
          <t>The media frame is decrypted using SFrame, resulting in a media-format-specific RTP payload.</t>
        </li>
        <li>
          <t>The media-format-specific RTP payload is combined with the RTP headers of the RTP packet with fragment index 0, resulting in a media-format-specific RTP packet.
The "media PT" from the SFrame RTP payload header is used as the payload type of the media-format-specific RTP packet.</t>
        </li>
        <li>
          <t>The media-format-specific RTP packet is passed into a media-format-specific RTP depacketizer, resulting in a media frame.</t>
        </li>
      </ol>
    </section>
    <section anchor="sframe-payload-type-negotiation">
      <name>SFrame payload type negotiation</name>
      <t>Because the payload type of an RTP packet that results from SFrame-specific packetization must match the
clock rate of the payload type of the RTP packet that results from media-format-specific packetization,
it may be necessary to negotiate more than one SFrame payload type.  For example, if one were to use SDP
to negotiate payload types, the following payload types could be negotiated with different clock rates:</t>
      <artwork><![CDATA[
m=audio 50000 RTP/SAVPF 96
a=rtpmap:96 sframe/48000
m=video 50002 RTP/SAVPF 97
a=rtpmap:97 sframe/90000
]]></artwork>
    </section>
    <section anchor="security-considerations">
      <name>Security Considerations</name>
      <t>This document is subject to the security considerations of SFrame.</t>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <t>None</t>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references anchor="sec-normative-references">
        <name>Normative References</name>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC7741">
          <front>
            <title>RTP Payload Format for VP8 Video</title>
            <author fullname="P. Westin" initials="P." surname="Westin"/>
            <author fullname="H. Lundin" initials="H." surname="Lundin"/>
            <author fullname="M. Glover" initials="M." surname="Glover"/>
            <author fullname="J. Uberti" initials="J." surname="Uberti"/>
            <author fullname="F. Galligan" initials="F." surname="Galligan"/>
            <date month="March" year="2016"/>
            <abstract>
              <t>This memo describes an RTP payload format for the VP8 video codec. The payload format has wide applicability, as it supports applications from low-bitrate peer-to-peer usage to high-bitrate video conferences.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7741"/>
          <seriesInfo name="DOI" value="10.17487/RFC7741"/>
        </reference>
      </references>
      <references anchor="sec-informative-references">
        <name>Informative References</name>
        <reference anchor="I-D.draft-ietf-sframe-enc-01">
          <front>
            <title>Secure Frame (SFrame)</title>
            <author fullname="Emad Omara" initials="E." surname="Omara">
              <organization>Apple</organization>
            </author>
            <author fullname="Justin Uberti" initials="J." surname="Uberti">
              <organization>Google</organization>
            </author>
            <author fullname="Sergio Garcia Murillo" initials="S. G." surname="Murillo">
              <organization>CoSMo Software</organization>
            </author>
            <author fullname="Richard Barnes" initials="R." surname="Barnes">
              <organization>Cisco</organization>
            </author>
            <author fullname="Youenn Fablet" initials="Y." surname="Fablet">
              <organization>Apple</organization>
            </author>
            <date day="13" month="March" year="2023"/>
            <abstract>
              <t>   This document describes the Secure Frame (SFrame) end-to-end
   encryption and authentication mechanism for media frames in a
   multiparty conference call, in which central media servers (selective
   forwarding units or SFUs) can access the media metadata needed to
   make forwarding decisions without having access to the actual media.

   The proposed mechanism differs from the Secure Real-Time Protocol
   (SRTP) in that it is independent of RTP (thus compatible with non-RTP
   media transport) and can be applied to whole media frames in order to
   be more bandwidth efficient.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sframe-enc-01"/>
        </reference>
      </references>
    </references>
  </back>
  <!-- ##markdown-source:
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

-->

</rfc>
